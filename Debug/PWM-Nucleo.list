
PWM-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003448  08003448  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003448  08003448  00013448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003450  08003450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003464  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfa6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3f  00000000  00000000  0002dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00030840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210a0  00000000  00000000  000313b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa7e  00000000  00000000  00052450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc9c7  00000000  00000000  00061ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  0012e8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003418 	.word	0x08003418

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003418 	.word	0x08003418

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb6e 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f918 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f8ec 	bl	80006f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800051c:	f000 f876 	bl	800060c <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000520:	2100      	movs	r1, #0
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <main+0x24>)
 8000524:	f001 fd68 	bl	8001ff8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x20>
 800052a:	bf00      	nop
 800052c:	20000028 	.word	0x20000028

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2234      	movs	r2, #52	; 0x34
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 ff62 	bl	8003408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <SystemClock_Config+0xd4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a29      	ldr	r2, [pc, #164]	; (8000604 <SystemClock_Config+0xd4>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <SystemClock_Config+0xd4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <SystemClock_Config+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a22      	ldr	r2, [pc, #136]	; (8000608 <SystemClock_Config+0xd8>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <SystemClock_Config+0xd8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a4:	2310      	movs	r3, #16
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f962 	bl	8001888 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ca:	f000 f953 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fdd0 	bl	8001190 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005f6:	f000 f93d 	bl	8000874 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	; 0x38
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_TIM2_Init+0xe4>)
 800063e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000642:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_TIM2_Init+0xe4>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_TIM2_Init+0xe4>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_TIM2_Init+0xe4>)
 8000652:	22ff      	movs	r2, #255	; 0xff
 8000654:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_TIM2_Init+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_TIM2_Init+0xe4>)
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000662:	4823      	ldr	r0, [pc, #140]	; (80006f0 <MX_TIM2_Init+0xe4>)
 8000664:	f001 fbae 	bl	8001dc4 <HAL_TIM_Base_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800066e:	f000 f901 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067c:	4619      	mov	r1, r3
 800067e:	481c      	ldr	r0, [pc, #112]	; (80006f0 <MX_TIM2_Init+0xe4>)
 8000680:	f001 ff4c 	bl	800251c <HAL_TIM_ConfigClockSource>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800068a:	f000 f8f3 	bl	8000874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800068e:	4818      	ldr	r0, [pc, #96]	; (80006f0 <MX_TIM2_Init+0xe4>)
 8000690:	f001 fc58 	bl	8001f44 <HAL_TIM_PWM_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800069a:	f000 f8eb 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4619      	mov	r1, r3
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <MX_TIM2_Init+0xe4>)
 80006ae:	f002 fb35 	bl	8002d1c <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80006b8:	f000 f8dc 	bl	8000874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 80006c0:	2319      	movs	r3, #25
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <MX_TIM2_Init+0xe4>)
 80006d4:	f001 fe60 	bl	8002398 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80006de:	f000 f8c9 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006e2:	4803      	ldr	r0, [pc, #12]	; (80006f0 <MX_TIM2_Init+0xe4>)
 80006e4:	f000 f914 	bl	8000910 <HAL_TIM_MspPostInit>

}
 80006e8:	bf00      	nop
 80006ea:	3738      	adds	r7, #56	; 0x38
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000028 	.word	0x20000028

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f002 fb86 	bl	8002e3c <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f89d 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000070 	.word	0x20000070
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a37      	ldr	r2, [pc, #220]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a30      	ldr	r2, [pc, #192]	; (8000844 <MX_GPIO_Init+0xfc>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <MX_GPIO_Init+0xfc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xfc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a29      	ldr	r2, [pc, #164]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0xfc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	481d      	ldr	r0, [pc, #116]	; (8000848 <MX_GPIO_Init+0x100>)
 80007d4:	f000 fcc2 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_GPIO_Port, PWM_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007de:	481b      	ldr	r0, [pc, #108]	; (800084c <MX_GPIO_Init+0x104>)
 80007e0:	f000 fcbc 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_GPIO_Init+0x104>)
 80007fc:	f000 fb1a 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000800:	2320      	movs	r3, #32
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_GPIO_Init+0x100>)
 8000818:	f000 fb0c 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_Pin */
  GPIO_InitStruct.Pin = PWM_Pin;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000822:	2311      	movs	r3, #17
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_GPIO_Init+0x104>)
 8000836:	f000 fafd 	bl	8000e34 <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 f9e5 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40000c00 	.word	0x40000c00

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008be:	2007      	movs	r0, #7
 80008c0:	f000 fa83 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e0:	d10d      	bne.n	80008fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_TIM_Base_MspInit+0x3c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_TIM_Base_MspInit+0x3c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_TIM_Base_MspInit+0x3c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000930:	d11d      	bne.n	800096e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_TIM_MspPostInit+0x68>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_TIM_MspPostInit+0x68>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_TIM_MspPostInit+0x68>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800094e:	2301      	movs	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <HAL_TIM_MspPostInit+0x6c>)
 800096a:	f000 fa63 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_UART_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12b      	bne.n	80009fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009da:	230c      	movs	r3, #12
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ea:	2307      	movs	r3, #7
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0x8c>)
 80009f6:	f000 fa1d 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <HAL_InitTick+0xe4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <HAL_InitTick+0xe4>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <HAL_InitTick+0xe4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a3c:	f107 0210 	add.w	r2, r7, #16
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fcbc 	bl	80013c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a56:	f000 fc8d 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 8000a5a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a5e:	f000 fc89 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 8000a62:	4603      	mov	r3, r0
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6a:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <HAL_InitTick+0xe8>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	0c9b      	lsrs	r3, r3, #18
 8000a72:	3b01      	subs	r3, #1
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_InitTick+0xec>)
 8000a78:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <HAL_InitTick+0xf0>)
 8000a7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_InitTick+0xec>)
 8000a7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a82:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <HAL_InitTick+0xec>)
 8000a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a88:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <HAL_InitTick+0xec>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_InitTick+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_InitTick+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a9c:	4817      	ldr	r0, [pc, #92]	; (8000afc <HAL_InitTick+0xec>)
 8000a9e:	f001 f991 	bl	8001dc4 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d11b      	bne.n	8000ae8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <HAL_InitTick+0xec>)
 8000ab2:	f001 f9d7 	bl	8001e64 <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d111      	bne.n	8000ae8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ac4:	2032      	movs	r0, #50	; 0x32
 8000ac6:	f000 f9a7 	bl	8000e18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d808      	bhi.n	8000ae2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2032      	movs	r0, #50	; 0x32
 8000ad6:	f000 f983 	bl	8000de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_InitTick+0xf4>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e002      	b.n	8000ae8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	200000b4 	.word	0x200000b4
 8000b00:	40000c00 	.word	0x40000c00
 8000b04:	20000004 	.word	0x20000004

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM5_IRQHandler+0x10>)
 8000b66:	f001 fb0f 	bl	8002188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000b4 	.word	0x200000b4

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f002 fbfb 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fc9d 	bl	8000508 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bdc:	08003458 	.word	0x08003458
  ldr r2, =_sbss
 8000be0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be4:	20000100 	.word	0x20000100

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8d8 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fef8 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe2e 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200000fc 	.word	0x200000fc

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000fc 	.word	0x200000fc

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e165      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8154 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80ae 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a58      	ldr	r2, [pc, #352]	; (8001138 <HAL_GPIO_Init+0x304>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x308>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x310>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x318>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x20a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x206>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x320>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x202>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	; (8001138 <HAL_GPIO_Init+0x304>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x324>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae96 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0cc      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a4:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d90c      	bls.n	80011cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	4b65      	ldr	r3, [pc, #404]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0b8      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e4:	4b59      	ldr	r3, [pc, #356]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a58      	ldr	r2, [pc, #352]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011fc:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001208:	4b50      	ldr	r3, [pc, #320]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	494d      	ldr	r1, [pc, #308]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	4313      	orrs	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d044      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d119      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e07f      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d003      	beq.n	800124e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124a:	2b03      	cmp	r3, #3
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124e:	4b3f      	ldr	r3, [pc, #252]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e06f      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e067      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f023 0203 	bic.w	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4934      	ldr	r1, [pc, #208]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	4313      	orrs	r3, r2
 800127e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001280:	f7ff fcea 	bl	8000c58 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001286:	e00a      	b.n	800129e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001288:	f7ff fce6 	bl	8000c58 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	; 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e04f      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 020c 	and.w	r2, r3, #12
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d1eb      	bne.n	8001288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d20c      	bcs.n	80012d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_RCC_ClockConfig+0x1b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e032      	b.n	800133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4916      	ldr	r1, [pc, #88]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	490e      	ldr	r1, [pc, #56]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001316:	f000 f887 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	490a      	ldr	r1, [pc, #40]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	5ccb      	ldrb	r3, [r1, r3]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_ClockConfig+0x1c8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fb6a 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023c00 	.word	0x40023c00
 800134c:	40023800 	.word	0x40023800
 8001350:	08003430 	.word	0x08003430
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_RCC_GetHCLKFreq+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000000 	.word	0x20000000

08001374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001378:	f7ff fff0 	bl	800135c <HAL_RCC_GetHCLKFreq>
 800137c:	4602      	mov	r2, r0
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0a9b      	lsrs	r3, r3, #10
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	4903      	ldr	r1, [pc, #12]	; (8001398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	08003440 	.word	0x08003440

0800139c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013a0:	f7ff ffdc 	bl	800135c <HAL_RCC_GetHCLKFreq>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	0b5b      	lsrs	r3, r3, #13
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	4903      	ldr	r1, [pc, #12]	; (80013c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	08003440 	.word	0x08003440

080013c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	220f      	movs	r2, #15
 80013d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_GetClockConfig+0x5c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_RCC_GetClockConfig+0x5c>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_RCC_GetClockConfig+0x5c>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_GetClockConfig+0x5c>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_RCC_GetClockConfig+0x60>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 020f 	and.w	r2, r3, #15
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40023c00 	.word	0x40023c00

08001428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800142c:	b0ae      	sub	sp, #184	; 0xb8
 800142e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800144e:	4bcb      	ldr	r3, [pc, #812]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b0c      	cmp	r3, #12
 8001458:	f200 8206 	bhi.w	8001868 <HAL_RCC_GetSysClockFreq+0x440>
 800145c:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <HAL_RCC_GetSysClockFreq+0x3c>)
 800145e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001462:	bf00      	nop
 8001464:	08001499 	.word	0x08001499
 8001468:	08001869 	.word	0x08001869
 800146c:	08001869 	.word	0x08001869
 8001470:	08001869 	.word	0x08001869
 8001474:	080014a1 	.word	0x080014a1
 8001478:	08001869 	.word	0x08001869
 800147c:	08001869 	.word	0x08001869
 8001480:	08001869 	.word	0x08001869
 8001484:	080014a9 	.word	0x080014a9
 8001488:	08001869 	.word	0x08001869
 800148c:	08001869 	.word	0x08001869
 8001490:	08001869 	.word	0x08001869
 8001494:	08001699 	.word	0x08001699
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001498:	4bb9      	ldr	r3, [pc, #740]	; (8001780 <HAL_RCC_GetSysClockFreq+0x358>)
 800149a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800149e:	e1e7      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a0:	4bb8      	ldr	r3, [pc, #736]	; (8001784 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014a6:	e1e3      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a8:	4bb4      	ldr	r3, [pc, #720]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b4:	4bb1      	ldr	r3, [pc, #708]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d071      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c0:	4bae      	ldr	r3, [pc, #696]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	099b      	lsrs	r3, r3, #6
 80014c6:	2200      	movs	r2, #0
 80014c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014e6:	4622      	mov	r2, r4
 80014e8:	462b      	mov	r3, r5
 80014ea:	f04f 0000 	mov.w	r0, #0
 80014ee:	f04f 0100 	mov.w	r1, #0
 80014f2:	0159      	lsls	r1, r3, #5
 80014f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f8:	0150      	lsls	r0, r2, #5
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4621      	mov	r1, r4
 8001500:	1a51      	subs	r1, r2, r1
 8001502:	6439      	str	r1, [r7, #64]	; 0x40
 8001504:	4629      	mov	r1, r5
 8001506:	eb63 0301 	sbc.w	r3, r3, r1
 800150a:	647b      	str	r3, [r7, #68]	; 0x44
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001518:	4649      	mov	r1, r9
 800151a:	018b      	lsls	r3, r1, #6
 800151c:	4641      	mov	r1, r8
 800151e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001522:	4641      	mov	r1, r8
 8001524:	018a      	lsls	r2, r1, #6
 8001526:	4641      	mov	r1, r8
 8001528:	1a51      	subs	r1, r2, r1
 800152a:	63b9      	str	r1, [r7, #56]	; 0x38
 800152c:	4649      	mov	r1, r9
 800152e:	eb63 0301 	sbc.w	r3, r3, r1
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001540:	4649      	mov	r1, r9
 8001542:	00cb      	lsls	r3, r1, #3
 8001544:	4641      	mov	r1, r8
 8001546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800154a:	4641      	mov	r1, r8
 800154c:	00ca      	lsls	r2, r1, #3
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	4603      	mov	r3, r0
 8001554:	4622      	mov	r2, r4
 8001556:	189b      	adds	r3, r3, r2
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
 800155a:	462b      	mov	r3, r5
 800155c:	460a      	mov	r2, r1
 800155e:	eb42 0303 	adc.w	r3, r2, r3
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001570:	4629      	mov	r1, r5
 8001572:	024b      	lsls	r3, r1, #9
 8001574:	4621      	mov	r1, r4
 8001576:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800157a:	4621      	mov	r1, r4
 800157c:	024a      	lsls	r2, r1, #9
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001586:	2200      	movs	r2, #0
 8001588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800158c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001590:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001594:	f7fe fe36 	bl	8000204 <__aeabi_uldivmod>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4613      	mov	r3, r2
 800159e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015a2:	e067      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a4:	4b75      	ldr	r3, [pc, #468]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80015be:	2300      	movs	r3, #0
 80015c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015c6:	4622      	mov	r2, r4
 80015c8:	462b      	mov	r3, r5
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	0159      	lsls	r1, r3, #5
 80015d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d8:	0150      	lsls	r0, r2, #5
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4621      	mov	r1, r4
 80015e0:	1a51      	subs	r1, r2, r1
 80015e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80015e4:	4629      	mov	r1, r5
 80015e6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015f8:	4649      	mov	r1, r9
 80015fa:	018b      	lsls	r3, r1, #6
 80015fc:	4641      	mov	r1, r8
 80015fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001602:	4641      	mov	r1, r8
 8001604:	018a      	lsls	r2, r1, #6
 8001606:	4641      	mov	r1, r8
 8001608:	ebb2 0a01 	subs.w	sl, r2, r1
 800160c:	4649      	mov	r1, r9
 800160e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800161e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001622:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001626:	4692      	mov	sl, r2
 8001628:	469b      	mov	fp, r3
 800162a:	4623      	mov	r3, r4
 800162c:	eb1a 0303 	adds.w	r3, sl, r3
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	462b      	mov	r3, r5
 8001634:	eb4b 0303 	adc.w	r3, fp, r3
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001646:	4629      	mov	r1, r5
 8001648:	028b      	lsls	r3, r1, #10
 800164a:	4621      	mov	r1, r4
 800164c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001650:	4621      	mov	r1, r4
 8001652:	028a      	lsls	r2, r1, #10
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800165c:	2200      	movs	r2, #0
 800165e:	673b      	str	r3, [r7, #112]	; 0x70
 8001660:	677a      	str	r2, [r7, #116]	; 0x74
 8001662:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001666:	f7fe fdcd 	bl	8000204 <__aeabi_uldivmod>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4613      	mov	r3, r2
 8001670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	3301      	adds	r3, #1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800168a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001696:	e0eb      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001698:	4b38      	ldr	r3, [pc, #224]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d06b      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <HAL_RCC_GetSysClockFreq+0x354>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	2200      	movs	r2, #0
 80016b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80016ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c2:	663b      	str	r3, [r7, #96]	; 0x60
 80016c4:	2300      	movs	r3, #0
 80016c6:	667b      	str	r3, [r7, #100]	; 0x64
 80016c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016cc:	4622      	mov	r2, r4
 80016ce:	462b      	mov	r3, r5
 80016d0:	f04f 0000 	mov.w	r0, #0
 80016d4:	f04f 0100 	mov.w	r1, #0
 80016d8:	0159      	lsls	r1, r3, #5
 80016da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016de:	0150      	lsls	r0, r2, #5
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4621      	mov	r1, r4
 80016e6:	1a51      	subs	r1, r2, r1
 80016e8:	61b9      	str	r1, [r7, #24]
 80016ea:	4629      	mov	r1, r5
 80016ec:	eb63 0301 	sbc.w	r3, r3, r1
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016fe:	4659      	mov	r1, fp
 8001700:	018b      	lsls	r3, r1, #6
 8001702:	4651      	mov	r1, sl
 8001704:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001708:	4651      	mov	r1, sl
 800170a:	018a      	lsls	r2, r1, #6
 800170c:	4651      	mov	r1, sl
 800170e:	ebb2 0801 	subs.w	r8, r2, r1
 8001712:	4659      	mov	r1, fp
 8001714:	eb63 0901 	sbc.w	r9, r3, r1
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001724:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001728:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800172c:	4690      	mov	r8, r2
 800172e:	4699      	mov	r9, r3
 8001730:	4623      	mov	r3, r4
 8001732:	eb18 0303 	adds.w	r3, r8, r3
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	462b      	mov	r3, r5
 800173a:	eb49 0303 	adc.w	r3, r9, r3
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800174c:	4629      	mov	r1, r5
 800174e:	024b      	lsls	r3, r1, #9
 8001750:	4621      	mov	r1, r4
 8001752:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001756:	4621      	mov	r1, r4
 8001758:	024a      	lsls	r2, r1, #9
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001762:	2200      	movs	r2, #0
 8001764:	65bb      	str	r3, [r7, #88]	; 0x58
 8001766:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001768:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800176c:	f7fe fd4a 	bl	8000204 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800177a:	e065      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x420>
 800177c:	40023800 	.word	0x40023800
 8001780:	00f42400 	.word	0x00f42400
 8001784:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_GetSysClockFreq+0x458>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	4611      	mov	r1, r2
 8001794:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001798:	653b      	str	r3, [r7, #80]	; 0x50
 800179a:	2300      	movs	r3, #0
 800179c:	657b      	str	r3, [r7, #84]	; 0x54
 800179e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017a2:	4642      	mov	r2, r8
 80017a4:	464b      	mov	r3, r9
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	0159      	lsls	r1, r3, #5
 80017b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b4:	0150      	lsls	r0, r2, #5
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4641      	mov	r1, r8
 80017bc:	1a51      	subs	r1, r2, r1
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	4649      	mov	r1, r9
 80017c2:	eb63 0301 	sbc.w	r3, r3, r1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017d4:	4659      	mov	r1, fp
 80017d6:	018b      	lsls	r3, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017de:	4651      	mov	r1, sl
 80017e0:	018a      	lsls	r2, r1, #6
 80017e2:	4651      	mov	r1, sl
 80017e4:	1a54      	subs	r4, r2, r1
 80017e6:	4659      	mov	r1, fp
 80017e8:	eb63 0501 	sbc.w	r5, r3, r1
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	00eb      	lsls	r3, r5, #3
 80017f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017fa:	00e2      	lsls	r2, r4, #3
 80017fc:	4614      	mov	r4, r2
 80017fe:	461d      	mov	r5, r3
 8001800:	4643      	mov	r3, r8
 8001802:	18e3      	adds	r3, r4, r3
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	464b      	mov	r3, r9
 8001808:	eb45 0303 	adc.w	r3, r5, r3
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800181a:	4629      	mov	r1, r5
 800181c:	028b      	lsls	r3, r1, #10
 800181e:	4621      	mov	r1, r4
 8001820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001824:	4621      	mov	r1, r4
 8001826:	028a      	lsls	r2, r1, #10
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001830:	2200      	movs	r2, #0
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
 8001834:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001836:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800183a:	f7fe fce3 	bl	8000204 <__aeabi_uldivmod>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4613      	mov	r3, r2
 8001844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_GetSysClockFreq+0x458>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	0f1b      	lsrs	r3, r3, #28
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800185a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001866:	e003      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_GetSysClockFreq+0x45c>)
 800186a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800186e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001874:	4618      	mov	r0, r3
 8001876:	37b8      	adds	r7, #184	; 0xb8
 8001878:	46bd      	mov	sp, r7
 800187a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	00f42400 	.word	0x00f42400

08001888 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e28d      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8083 	beq.w	80019ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018a8:	4b94      	ldr	r3, [pc, #592]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d019      	beq.n	80018e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018b4:	4b91      	ldr	r3, [pc, #580]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018c0:	4b8e      	ldr	r3, [pc, #568]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018cc:	d00c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d112      	bne.n	8001900 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e6:	d10b      	bne.n	8001900 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	4b84      	ldr	r3, [pc, #528]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d05b      	beq.n	80019ac <HAL_RCC_OscConfig+0x124>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d157      	bne.n	80019ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e25a      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d106      	bne.n	8001918 <HAL_RCC_OscConfig+0x90>
 800190a:	4b7c      	ldr	r3, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7b      	ldr	r2, [pc, #492]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xcc>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0xb4>
 8001922:	4b76      	ldr	r3, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a75      	ldr	r2, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a72      	ldr	r2, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xcc>
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6e      	ldr	r2, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6b      	ldr	r2, [pc, #428]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f97c 	bl	8000c58 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff f978 	bl	8000c58 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e21f      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xdc>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f968 	bl	8000c58 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f964 	bl	8000c58 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e20b      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	4b57      	ldr	r3, [pc, #348]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x104>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d06f      	beq.n	8001a9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019ba:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d017      	beq.n	80019f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019c6:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d105      	bne.n	80019de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019d2:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019de:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d11c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x186>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1d3      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_RCC_OscConfig+0x278>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f911 	bl	8000c58 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f90d 	bl	8000c58 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1b4      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x278>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f8f0 	bl	8000c58 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f8ec 	bl	8000c58 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e193      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d036      	beq.n	8001b14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d016      	beq.n	8001adc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_RCC_OscConfig+0x27c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f8d0 	bl	8000c58 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff f8cc 	bl	8000c58 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e173      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x234>
 8001ada:	e01b      	b.n	8001b14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x27c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f8b9 	bl	8000c58 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	e00e      	b.n	8001b08 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aea:	f7ff f8b5 	bl	8000c58 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d907      	bls.n	8001b08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e15c      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	42470000 	.word	0x42470000
 8001b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ea      	bne.n	8001aea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8097 	beq.w	8001c50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b83      	ldr	r3, [pc, #524]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b7f      	ldr	r3, [pc, #508]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a7e      	ldr	r2, [pc, #504]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b7c      	ldr	r3, [pc, #496]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4b79      	ldr	r3, [pc, #484]	; (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d118      	bne.n	8001b90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5e:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a75      	ldr	r2, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f875 	bl	8000c58 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7ff f871 	bl	8000c58 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e118      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	4b6c      	ldr	r3, [pc, #432]	; (8001d38 <HAL_RCC_OscConfig+0x4b0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x31e>
 8001b98:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9c:	4a65      	ldr	r2, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x358>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x340>
 8001bae:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bba:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x358>
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a59      	ldr	r2, [pc, #356]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a56      	ldr	r2, [pc, #344]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff f836 	bl	8000c58 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f832 	bl	8000c58 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0d7      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0ee      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x368>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f820 	bl	8000c58 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f81c 	bl	8000c58 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0c1      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ee      	bne.n	8001c1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ad 	beq.w	8001db4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5a:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d060      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d145      	bne.n	8001cfa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_RCC_OscConfig+0x4b4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7fe fff0 	bl	8000c58 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7fe ffec 	bl	8000c58 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e093      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	071b      	lsls	r3, r3, #28
 8001cc6:	491b      	ldr	r1, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x4b4>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7fe ffc1 	bl	8000c58 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe ffbd 	bl	8000c58 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e064      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x452>
 8001cf8:	e05c      	b.n	8001db4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x4b4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7fe ffaa 	bl	8000c58 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe ffa6 	bl	8000c58 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04d      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x480>
 8001d26:	e045      	b.n	8001db4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e040      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_RCC_OscConfig+0x538>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d030      	beq.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d129      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d122      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d119      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10f      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e041      	b.n	8001e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fd70 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f000 fc7a 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d001      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e04e      	b.n	8001f1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d022      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea6:	d01d      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_TIM_Base_Start_IT+0xc8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d018      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_TIM_Base_Start_IT+0xcc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00e      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d009      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x80>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d111      	bne.n	8001f08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d010      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f06:	e007      	b.n	8001f18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00
 8001f38:	40010400 	.word	0x40010400
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40001800 	.word	0x40001800

08001f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e041      	b.n	8001fda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f839 	bl	8001fe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f000 fbba 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_TIM_PWM_Start+0x24>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e022      	b.n	8002062 <HAL_TIM_PWM_Start+0x6a>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d109      	bne.n	8002036 <HAL_TIM_PWM_Start+0x3e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	bf14      	ite	ne
 800202e:	2301      	movne	r3, #1
 8002030:	2300      	moveq	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	e015      	b.n	8002062 <HAL_TIM_PWM_Start+0x6a>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d109      	bne.n	8002050 <HAL_TIM_PWM_Start+0x58>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	e008      	b.n	8002062 <HAL_TIM_PWM_Start+0x6a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07c      	b.n	8002164 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d104      	bne.n	800207a <HAL_TIM_PWM_Start+0x82>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002078:	e013      	b.n	80020a2 <HAL_TIM_PWM_Start+0xaa>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d104      	bne.n	800208a <HAL_TIM_PWM_Start+0x92>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002088:	e00b      	b.n	80020a2 <HAL_TIM_PWM_Start+0xaa>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d104      	bne.n	800209a <HAL_TIM_PWM_Start+0xa2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002098:	e003      	b.n	80020a2 <HAL_TIM_PWM_Start+0xaa>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	6839      	ldr	r1, [r7, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fe10 	bl	8002cd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2d      	ldr	r2, [pc, #180]	; (800216c <HAL_TIM_PWM_Start+0x174>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_TIM_PWM_Start+0xcc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <HAL_TIM_PWM_Start+0x178>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_TIM_PWM_Start+0xd0>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_TIM_PWM_Start+0xd2>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_TIM_PWM_Start+0x174>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_TIM_PWM_Start+0x136>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d01d      	beq.n	800212e <HAL_TIM_PWM_Start+0x136>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_TIM_PWM_Start+0x17c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d018      	beq.n	800212e <HAL_TIM_PWM_Start+0x136>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_TIM_PWM_Start+0x180>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_TIM_PWM_Start+0x136>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_TIM_PWM_Start+0x184>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00e      	beq.n	800212e <HAL_TIM_PWM_Start+0x136>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_TIM_PWM_Start+0x178>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d009      	beq.n	800212e <HAL_TIM_PWM_Start+0x136>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_TIM_PWM_Start+0x188>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_TIM_PWM_Start+0x136>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a16      	ldr	r2, [pc, #88]	; (8002184 <HAL_TIM_PWM_Start+0x18c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d111      	bne.n	8002152 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b06      	cmp	r3, #6
 800213e:	d010      	beq.n	8002162 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002150:	e007      	b.n	8002162 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40010000 	.word	0x40010000
 8002170:	40010400 	.word	0x40010400
 8002174:	40000400 	.word	0x40000400
 8002178:	40000800 	.word	0x40000800
 800217c:	40000c00 	.word	0x40000c00
 8002180:	40014000 	.word	0x40014000
 8002184:	40001800 	.word	0x40001800

08002188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0202 	mvn.w	r2, #2
 80021b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa77 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa69 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa7a 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0204 	mvn.w	r2, #4
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa4d 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa3f 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa50 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b08      	cmp	r3, #8
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b08      	cmp	r3, #8
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0208 	mvn.w	r2, #8
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2204      	movs	r2, #4
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa23 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa15 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fa26 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b10      	cmp	r3, #16
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0210 	mvn.w	r2, #16
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2208      	movs	r2, #8
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f9f9 	bl	80026be <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f9eb 	bl	80026aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f9fc 	bl	80026d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0201 	mvn.w	r2, #1
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe faa2 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	2b80      	cmp	r3, #128	; 0x80
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fd78 	bl	8002e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002350:	2b40      	cmp	r3, #64	; 0x40
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f9c1 	bl	80026e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b20      	cmp	r3, #32
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b20      	cmp	r3, #32
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0220 	mvn.w	r2, #32
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fd42 	bl	8002e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0ae      	b.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	f200 809f 	bhi.w	8002504 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	08002401 	.word	0x08002401
 80023d0:	08002505 	.word	0x08002505
 80023d4:	08002505 	.word	0x08002505
 80023d8:	08002505 	.word	0x08002505
 80023dc:	08002441 	.word	0x08002441
 80023e0:	08002505 	.word	0x08002505
 80023e4:	08002505 	.word	0x08002505
 80023e8:	08002505 	.word	0x08002505
 80023ec:	08002483 	.word	0x08002483
 80023f0:	08002505 	.word	0x08002505
 80023f4:	08002505 	.word	0x08002505
 80023f8:	08002505 	.word	0x08002505
 80023fc:	080024c3 	.word	0x080024c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fa18 	bl	800283c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0208 	orr.w	r2, r2, #8
 800241a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0204 	bic.w	r2, r2, #4
 800242a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6999      	ldr	r1, [r3, #24]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	619a      	str	r2, [r3, #24]
      break;
 800243e:	e064      	b.n	800250a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fa68 	bl	800291c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800245a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6999      	ldr	r1, [r3, #24]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	021a      	lsls	r2, r3, #8
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	619a      	str	r2, [r3, #24]
      break;
 8002480:	e043      	b.n	800250a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fabd 	bl	8002a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0208 	orr.w	r2, r2, #8
 800249c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0204 	bic.w	r2, r2, #4
 80024ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69d9      	ldr	r1, [r3, #28]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	61da      	str	r2, [r3, #28]
      break;
 80024c0:	e023      	b.n	800250a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fb11 	bl	8002af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69d9      	ldr	r1, [r3, #28]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	021a      	lsls	r2, r3, #8
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	61da      	str	r2, [r3, #28]
      break;
 8002502:	e002      	b.n	800250a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	75fb      	strb	r3, [r7, #23]
      break;
 8002508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_TIM_ConfigClockSource+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e0b4      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x186>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800255e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002570:	d03e      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002576:	f200 8087 	bhi.w	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257e:	f000 8086 	beq.w	800268e <HAL_TIM_ConfigClockSource+0x172>
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d87f      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b70      	cmp	r3, #112	; 0x70
 800258a:	d01a      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xa6>
 800258c:	2b70      	cmp	r3, #112	; 0x70
 800258e:	d87b      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d050      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0x11a>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d877      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b50      	cmp	r3, #80	; 0x50
 800259a:	d03c      	beq.n	8002616 <HAL_TIM_ConfigClockSource+0xfa>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d873      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d058      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x13a>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d86f      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d064      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d86b      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d060      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d867      	bhi.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d05c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d05a      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x15a>
 80025c0:	e062      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f000 fb5d 	bl	8002c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	609a      	str	r2, [r3, #8]
      break;
 80025ee:	e04f      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f000 fb46 	bl	8002c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002612:	609a      	str	r2, [r3, #8]
      break;
 8002614:	e03c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	461a      	mov	r2, r3
 8002624:	f000 faba 	bl	8002b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2150      	movs	r1, #80	; 0x50
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fb13 	bl	8002c5a <TIM_ITRx_SetConfig>
      break;
 8002634:	e02c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	461a      	mov	r2, r3
 8002644:	f000 fad9 	bl	8002bfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2160      	movs	r1, #96	; 0x60
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fb03 	bl	8002c5a <TIM_ITRx_SetConfig>
      break;
 8002654:	e01c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	461a      	mov	r2, r3
 8002664:	f000 fa9a 	bl	8002b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2140      	movs	r1, #64	; 0x40
 800266e:	4618      	mov	r0, r3
 8002670:	f000 faf3 	bl	8002c5a <TIM_ITRx_SetConfig>
      break;
 8002674:	e00c      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f000 faea 	bl	8002c5a <TIM_ITRx_SetConfig>
      break;
 8002686:	e003      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e000      	b.n	8002690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800268e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a40      	ldr	r2, [pc, #256]	; (8002810 <TIM_Base_SetConfig+0x114>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d00f      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <TIM_Base_SetConfig+0x118>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00b      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a3c      	ldr	r2, [pc, #240]	; (8002818 <TIM_Base_SetConfig+0x11c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a3b      	ldr	r2, [pc, #236]	; (800281c <TIM_Base_SetConfig+0x120>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <TIM_Base_SetConfig+0x40>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3a      	ldr	r2, [pc, #232]	; (8002820 <TIM_Base_SetConfig+0x124>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2f      	ldr	r2, [pc, #188]	; (8002810 <TIM_Base_SetConfig+0x114>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d027      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2c      	ldr	r2, [pc, #176]	; (8002814 <TIM_Base_SetConfig+0x118>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d023      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <TIM_Base_SetConfig+0x11c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01f      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2a      	ldr	r2, [pc, #168]	; (800281c <TIM_Base_SetConfig+0x120>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01b      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a29      	ldr	r2, [pc, #164]	; (8002820 <TIM_Base_SetConfig+0x124>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d017      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a28      	ldr	r2, [pc, #160]	; (8002824 <TIM_Base_SetConfig+0x128>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <TIM_Base_SetConfig+0x12c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00f      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <TIM_Base_SetConfig+0x130>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00b      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <TIM_Base_SetConfig+0x134>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a24      	ldr	r2, [pc, #144]	; (8002834 <TIM_Base_SetConfig+0x138>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a23      	ldr	r2, [pc, #140]	; (8002838 <TIM_Base_SetConfig+0x13c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d108      	bne.n	80027c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <TIM_Base_SetConfig+0x114>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_Base_SetConfig+0xf8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <TIM_Base_SetConfig+0x124>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40010000 	.word	0x40010000
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800
 800281c:	40000c00 	.word	0x40000c00
 8002820:	40010400 	.word	0x40010400
 8002824:	40014000 	.word	0x40014000
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800
 8002830:	40001800 	.word	0x40001800
 8002834:	40001c00 	.word	0x40001c00
 8002838:	40002000 	.word	0x40002000

0800283c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f023 0201 	bic.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f023 0302 	bic.w	r3, r3, #2
 8002884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <TIM_OC1_SetConfig+0xd8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d003      	beq.n	80028a0 <TIM_OC1_SetConfig+0x64>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <TIM_OC1_SetConfig+0xdc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10c      	bne.n	80028ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0308 	bic.w	r3, r3, #8
 80028a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <TIM_OC1_SetConfig+0xd8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_OC1_SetConfig+0x8e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <TIM_OC1_SetConfig+0xdc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d111      	bne.n	80028ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	621a      	str	r2, [r3, #32]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40010000 	.word	0x40010000
 8002918:	40010400 	.word	0x40010400

0800291c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f023 0210 	bic.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 0320 	bic.w	r3, r3, #32
 8002966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <TIM_OC2_SetConfig+0xe4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_OC2_SetConfig+0x68>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <TIM_OC2_SetConfig+0xe8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10d      	bne.n	80029a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800298a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <TIM_OC2_SetConfig+0xe4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_OC2_SetConfig+0x94>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <TIM_OC2_SetConfig+0xe8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d113      	bne.n	80029d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40010400 	.word	0x40010400

08002a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <TIM_OC3_SetConfig+0xe0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_OC3_SetConfig+0x66>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <TIM_OC3_SetConfig+0xe4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10d      	bne.n	8002a8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <TIM_OC3_SetConfig+0xe0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d003      	beq.n	8002a9a <TIM_OC3_SetConfig+0x92>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <TIM_OC3_SetConfig+0xe4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d113      	bne.n	8002ac2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	621a      	str	r2, [r3, #32]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40010400 	.word	0x40010400

08002af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	031b      	lsls	r3, r3, #12
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <TIM_OC4_SetConfig+0xa4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_OC4_SetConfig+0x68>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <TIM_OC4_SetConfig+0xa8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d109      	bne.n	8002b6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40010400 	.word	0x40010400

08002b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0201 	bic.w	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f023 030a 	bic.w	r3, r3, #10
 8002bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	621a      	str	r2, [r3, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b087      	sub	sp, #28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f023 0210 	bic.w	r2, r3, #16
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	031b      	lsls	r3, r3, #12
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f043 0307 	orr.w	r3, r3, #7
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	021a      	lsls	r2, r3, #8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	609a      	str	r2, [r3, #8]
}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1a      	ldr	r2, [r3, #32]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e05a      	b.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d01d      	beq.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40001800 	.word	0x40001800

08002e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e03f      	b.n	8002ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd fd8c 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f829 	bl	8002ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002edc:	b0c0      	sub	sp, #256	; 0x100
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	68d9      	ldr	r1, [r3, #12]
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	ea40 0301 	orr.w	r3, r0, r1
 8002f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f30:	f021 010c 	bic.w	r1, r1, #12
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	6999      	ldr	r1, [r3, #24]
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	ea40 0301 	orr.w	r3, r0, r1
 8002f5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <UART_SetConfig+0x2cc>)
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d005      	beq.n	8002f78 <UART_SetConfig+0xa0>
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <UART_SetConfig+0x2d0>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d104      	bne.n	8002f82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7fe fa10 	bl	800139c <HAL_RCC_GetPCLK2Freq>
 8002f7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f80:	e003      	b.n	8002f8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f82:	f7fe f9f7 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 8002f86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f94:	f040 810c 	bne.w	80031b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002faa:	4622      	mov	r2, r4
 8002fac:	462b      	mov	r3, r5
 8002fae:	1891      	adds	r1, r2, r2
 8002fb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fb2:	415b      	adcs	r3, r3
 8002fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fba:	4621      	mov	r1, r4
 8002fbc:	eb12 0801 	adds.w	r8, r2, r1
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb43 0901 	adc.w	r9, r3, r1
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fda:	4690      	mov	r8, r2
 8002fdc:	4699      	mov	r9, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	eb18 0303 	adds.w	r3, r8, r3
 8002fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fe8:	462b      	mov	r3, r5
 8002fea:	eb49 0303 	adc.w	r3, r9, r3
 8002fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ffe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003006:	460b      	mov	r3, r1
 8003008:	18db      	adds	r3, r3, r3
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
 800300c:	4613      	mov	r3, r2
 800300e:	eb42 0303 	adc.w	r3, r2, r3
 8003012:	657b      	str	r3, [r7, #84]	; 0x54
 8003014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800301c:	f7fd f8f2 	bl	8000204 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4b61      	ldr	r3, [pc, #388]	; (80031ac <UART_SetConfig+0x2d4>)
 8003026:	fba3 2302 	umull	r2, r3, r3, r2
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	011c      	lsls	r4, r3, #4
 800302e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003038:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800303c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003040:	4642      	mov	r2, r8
 8003042:	464b      	mov	r3, r9
 8003044:	1891      	adds	r1, r2, r2
 8003046:	64b9      	str	r1, [r7, #72]	; 0x48
 8003048:	415b      	adcs	r3, r3
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800304c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003050:	4641      	mov	r1, r8
 8003052:	eb12 0a01 	adds.w	sl, r2, r1
 8003056:	4649      	mov	r1, r9
 8003058:	eb43 0b01 	adc.w	fp, r3, r1
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800306c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003070:	4692      	mov	sl, r2
 8003072:	469b      	mov	fp, r3
 8003074:	4643      	mov	r3, r8
 8003076:	eb1a 0303 	adds.w	r3, sl, r3
 800307a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800307e:	464b      	mov	r3, r9
 8003080:	eb4b 0303 	adc.w	r3, fp, r3
 8003084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003094:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003098:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800309c:	460b      	mov	r3, r1
 800309e:	18db      	adds	r3, r3, r3
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
 80030a2:	4613      	mov	r3, r2
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
 80030aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030b2:	f7fd f8a7 	bl	8000204 <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <UART_SetConfig+0x2d4>)
 80030be:	fba3 2301 	umull	r2, r3, r3, r1
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	2264      	movs	r2, #100	; 0x64
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	1acb      	subs	r3, r1, r3
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030d2:	4b36      	ldr	r3, [pc, #216]	; (80031ac <UART_SetConfig+0x2d4>)
 80030d4:	fba3 2302 	umull	r2, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030e0:	441c      	add	r4, r3
 80030e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030f4:	4642      	mov	r2, r8
 80030f6:	464b      	mov	r3, r9
 80030f8:	1891      	adds	r1, r2, r2
 80030fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80030fc:	415b      	adcs	r3, r3
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003104:	4641      	mov	r1, r8
 8003106:	1851      	adds	r1, r2, r1
 8003108:	6339      	str	r1, [r7, #48]	; 0x30
 800310a:	4649      	mov	r1, r9
 800310c:	414b      	adcs	r3, r1
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800311c:	4659      	mov	r1, fp
 800311e:	00cb      	lsls	r3, r1, #3
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003126:	4651      	mov	r1, sl
 8003128:	00ca      	lsls	r2, r1, #3
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	4603      	mov	r3, r0
 8003130:	4642      	mov	r2, r8
 8003132:	189b      	adds	r3, r3, r2
 8003134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003138:	464b      	mov	r3, r9
 800313a:	460a      	mov	r2, r1
 800313c:	eb42 0303 	adc.w	r3, r2, r3
 8003140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003150:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003154:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003158:	460b      	mov	r3, r1
 800315a:	18db      	adds	r3, r3, r3
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
 800315e:	4613      	mov	r3, r2
 8003160:	eb42 0303 	adc.w	r3, r2, r3
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800316a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800316e:	f7fd f849 	bl	8000204 <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <UART_SetConfig+0x2d4>)
 8003178:	fba3 1302 	umull	r1, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	2164      	movs	r1, #100	; 0x64
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	3332      	adds	r3, #50	; 0x32
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <UART_SetConfig+0x2d4>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	f003 0207 	and.w	r2, r3, #7
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4422      	add	r2, r4
 800319e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031a0:	e105      	b.n	80033ae <UART_SetConfig+0x4d6>
 80031a2:	bf00      	nop
 80031a4:	40011000 	.word	0x40011000
 80031a8:	40011400 	.word	0x40011400
 80031ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031c2:	4642      	mov	r2, r8
 80031c4:	464b      	mov	r3, r9
 80031c6:	1891      	adds	r1, r2, r2
 80031c8:	6239      	str	r1, [r7, #32]
 80031ca:	415b      	adcs	r3, r3
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d2:	4641      	mov	r1, r8
 80031d4:	1854      	adds	r4, r2, r1
 80031d6:	4649      	mov	r1, r9
 80031d8:	eb43 0501 	adc.w	r5, r3, r1
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	00eb      	lsls	r3, r5, #3
 80031e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ea:	00e2      	lsls	r2, r4, #3
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	18e3      	adds	r3, r4, r3
 80031f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031f8:	464b      	mov	r3, r9
 80031fa:	eb45 0303 	adc.w	r3, r5, r3
 80031fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800320e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800321e:	4629      	mov	r1, r5
 8003220:	008b      	lsls	r3, r1, #2
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003228:	4621      	mov	r1, r4
 800322a:	008a      	lsls	r2, r1, #2
 800322c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003230:	f7fc ffe8 	bl	8000204 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4b60      	ldr	r3, [pc, #384]	; (80033bc <UART_SetConfig+0x4e4>)
 800323a:	fba3 2302 	umull	r2, r3, r3, r2
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	011c      	lsls	r4, r3, #4
 8003242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003246:	2200      	movs	r2, #0
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800324c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003250:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003254:	4642      	mov	r2, r8
 8003256:	464b      	mov	r3, r9
 8003258:	1891      	adds	r1, r2, r2
 800325a:	61b9      	str	r1, [r7, #24]
 800325c:	415b      	adcs	r3, r3
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003264:	4641      	mov	r1, r8
 8003266:	1851      	adds	r1, r2, r1
 8003268:	6139      	str	r1, [r7, #16]
 800326a:	4649      	mov	r1, r9
 800326c:	414b      	adcs	r3, r1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800327c:	4659      	mov	r1, fp
 800327e:	00cb      	lsls	r3, r1, #3
 8003280:	4651      	mov	r1, sl
 8003282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003286:	4651      	mov	r1, sl
 8003288:	00ca      	lsls	r2, r1, #3
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	4603      	mov	r3, r0
 8003290:	4642      	mov	r2, r8
 8003292:	189b      	adds	r3, r3, r2
 8003294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003298:	464b      	mov	r3, r9
 800329a:	460a      	mov	r2, r1
 800329c:	eb42 0303 	adc.w	r3, r2, r3
 80032a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032bc:	4649      	mov	r1, r9
 80032be:	008b      	lsls	r3, r1, #2
 80032c0:	4641      	mov	r1, r8
 80032c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c6:	4641      	mov	r1, r8
 80032c8:	008a      	lsls	r2, r1, #2
 80032ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032ce:	f7fc ff99 	bl	8000204 <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <UART_SetConfig+0x4e4>)
 80032d8:	fba3 1302 	umull	r1, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	2164      	movs	r1, #100	; 0x64
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	3332      	adds	r3, #50	; 0x32
 80032ea:	4a34      	ldr	r2, [pc, #208]	; (80033bc <UART_SetConfig+0x4e4>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f6:	441c      	add	r4, r3
 80032f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fc:	2200      	movs	r2, #0
 80032fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003300:	677a      	str	r2, [r7, #116]	; 0x74
 8003302:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003306:	4642      	mov	r2, r8
 8003308:	464b      	mov	r3, r9
 800330a:	1891      	adds	r1, r2, r2
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	415b      	adcs	r3, r3
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003316:	4641      	mov	r1, r8
 8003318:	1851      	adds	r1, r2, r1
 800331a:	6039      	str	r1, [r7, #0]
 800331c:	4649      	mov	r1, r9
 800331e:	414b      	adcs	r3, r1
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800332e:	4659      	mov	r1, fp
 8003330:	00cb      	lsls	r3, r1, #3
 8003332:	4651      	mov	r1, sl
 8003334:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003338:	4651      	mov	r1, sl
 800333a:	00ca      	lsls	r2, r1, #3
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	4603      	mov	r3, r0
 8003342:	4642      	mov	r2, r8
 8003344:	189b      	adds	r3, r3, r2
 8003346:	66bb      	str	r3, [r7, #104]	; 0x68
 8003348:	464b      	mov	r3, r9
 800334a:	460a      	mov	r2, r1
 800334c:	eb42 0303 	adc.w	r3, r2, r3
 8003350:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	663b      	str	r3, [r7, #96]	; 0x60
 800335c:	667a      	str	r2, [r7, #100]	; 0x64
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800336a:	4649      	mov	r1, r9
 800336c:	008b      	lsls	r3, r1, #2
 800336e:	4641      	mov	r1, r8
 8003370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003374:	4641      	mov	r1, r8
 8003376:	008a      	lsls	r2, r1, #2
 8003378:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800337c:	f7fc ff42 	bl	8000204 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <UART_SetConfig+0x4e4>)
 8003386:	fba3 1302 	umull	r1, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2164      	movs	r1, #100	; 0x64
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	3332      	adds	r3, #50	; 0x32
 8003398:	4a08      	ldr	r2, [pc, #32]	; (80033bc <UART_SetConfig+0x4e4>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	f003 020f 	and.w	r2, r3, #15
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4422      	add	r2, r4
 80033ac:	609a      	str	r2, [r3, #8]
}
 80033ae:	bf00      	nop
 80033b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	51eb851f 	.word	0x51eb851f

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4d0d      	ldr	r5, [pc, #52]	; (80033f8 <__libc_init_array+0x38>)
 80033c4:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <__libc_init_array+0x3c>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	2600      	movs	r6, #0
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	4d0b      	ldr	r5, [pc, #44]	; (8003400 <__libc_init_array+0x40>)
 80033d2:	4c0c      	ldr	r4, [pc, #48]	; (8003404 <__libc_init_array+0x44>)
 80033d4:	f000 f820 	bl	8003418 <_init>
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	2600      	movs	r6, #0
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	08003450 	.word	0x08003450
 80033fc:	08003450 	.word	0x08003450
 8003400:	08003450 	.word	0x08003450
 8003404:	08003454 	.word	0x08003454

08003408 <memset>:
 8003408:	4402      	add	r2, r0
 800340a:	4603      	mov	r3, r0
 800340c:	4293      	cmp	r3, r2
 800340e:	d100      	bne.n	8003412 <memset+0xa>
 8003410:	4770      	bx	lr
 8003412:	f803 1b01 	strb.w	r1, [r3], #1
 8003416:	e7f9      	b.n	800340c <memset+0x4>

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
